
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main()           //doubt ye h ki input loop 1=0 se e tk hi q chala rhe h. (qki input me vertex k baad wo edge pr hi jaega fir edge ko hi dekhenge na )
{                   //bfs with indegree wala que acyclic mtlb ek hi direction me mtlb
    //input lete time ek ka hi indegree bdega
    int v,e;       //sirf que me ye vertex aur edge diye honge
    cin>>v>>e;
    
    //input lene wala prgm
    vector<int>g[v+1];       //adjacancy vector bnalo jisme hm input store krenge
    vector<int>in(v+1,0);    //indegree use hogi
    for(int i=0;i<e;i++){    //ab yha i=1 isliye nhi h qki input dekh rhe h jo hmesha 0 se hi shuru hoga aur e tk hi chalana h(edge ko dekhenge jb tk edge h i.e. 13 tb tk loop chalega)
        int x,y;             //ab test cases k andar particular vertex kis vertex se judi h
        cin>>x>>y;           //for ex. x=1 y=2 to mtlb 1 ka sign 2 ki taraf h aur in[2]++ hoga
        g[x].push_back(y);   //ab input to store krado jese g[1] me 3,4,5 mtlb 1 3,4,5 ko pt kr rha h
        in[y]++;             //to 3,4,5 ka indegree 1 se bdado.
    }
    
    //basic condition wala
    vector<int>ans(v+1,0);   //ans store krne k liye v+1 krna hi pdega qki yha ab sb i=1 se 10 tk chlega
    queue<int>q;             //bfs h isliye q
    for(int i=1;i<=v;i++){   //pehli condition ki i=1 pr agr indegree 0 h to q me rkhdo
        if(in[i]==0){        //aur sath hi ans[1]=1 krdo.
            q.push(i);
            ans[i]=1;
        }
    }
    
    //pura logic basic condition ko chodkrr
    while(!q.empty()){       //jb tk q empty nhi hota q.front ka adjacent dekho
        int t=q.front();     //aur tb q.front() ko pop krdo
        q.pop();             //agr adjacent ka indegree 0 h to uska ans me +1 krdo aur use q me add krdo
        for(auto x:g[t]){    
            in[x]--;
            if(in[x]==0){
                ans[x]=ans[t]+1;
                q.push(x);
            }
        }
    }
    
    //ans 
    for(int i=1;i<=v;i++) cout<<ans[i]<<" ";  //ans print krdo
    

    return 0;
}


//output
10 13
1 3
1 4
1 5
2 3
2 9
3 6
4 6
4 8
2 8
5 8
6 7
7 8
8 10
1 1 2 2 2 3 4 5 2 6
