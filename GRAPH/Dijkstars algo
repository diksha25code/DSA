#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
#include <queue>
#include <bits/stdc++.h>
using namespace std;


int main() {
    //bfs
    //q : testcases
    //n : no of nodes
    //m : no of edges
    //u : node 1
    //v : node 2(node1 se node2 connected)
    //g graph h jisme nodes connected h jo hopari h baki sari nodes ka distance 6 lena h
    //s : source node jha se shuru krna h 
    //distance : vector h ek jisme source node se baki sari nodes ka distance store krenge
    //distance[s]=0 krdo aur que shuru krdo
    //then min heap(pqiority queue bnalo)
    //aur s ka distance aur s node ko pq me daldo aur tb tk chalao jb tk pq empty nhi hojata
    //min distance apne aap sbse upr ajaega pq me aur jese hi top me hmne wo le liya wese hi pop krdo ab top ki node ko traverse kro which is prev fir prev ko traverse kro using iterator ab node ko traverse krenge to ek aur node milega which is next aur distance milega which is nextdist aur jo prev h uska dis h hi hmare pass distance[prev] me ab ye dekho ki agr nextdist+distance[prev] agr chota h distance[next] se to next ka distance update krdo qki hmko min se min distance chahiye then jb sare distance update hogye then cout krane k liye source wala node chodkrr n tk k distance chahiye aur even i=0 ka bhi nhi chahiye to condition le lagao ki agr distance infinity se chota h and source node nhi h to cout wo distance wrna cout -1 
    
int q;
    cin>>q;
    while(q--){
        int n,m;
        cin>>n>>m;
        vector<vector<pair<int,int>>>g(n+1);
        // vector<pair<int,int>>g[n+1];
        for(int i=0;i<m;i++){
            int u,v;
            cin>>u>>v;
            g[u].push_back({v,6});
            g[v].push_back({u,6});
        }
        
        int s;
        cin>>s;
        vector<int>distance(n+1,INT_MAX);
        
        distance[s]=0;
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push(make_pair(0,s));
        
        while(!pq.empty()){
           // pair<int, int> top = pq.top();
            // int dist=pq.top().first;
            int prev=pq.top().second;
            pq.pop();
            
            // vector<pair<int,int>>:: iterator it;
            for(auto it : g[prev]){
                int next=it.first;
                int nextDist=it.second;
                
                if(distance[next] > distance[prev] + nextDist){
                    distance[next] = distance[prev] + nextDist;
                    pq.push(make_pair(distance[next],next));
                }
            }
        }
        
        for(int i=1;i<=n;i++){
            if(i!=s){
                if(distance[i]<INT_MAX){
                    cout<<distance[i]<<" ";
                }
                else{
                    cout<<-1<<" ";
                }
                
            }
        }
        cout<<endl;
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}


//input
2
4 2
1 2
1 3
1
3 1
2 3
2
//output
6 6 -1
-1 6
