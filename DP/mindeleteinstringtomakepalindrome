
#include <iostream>
#include <algorithm>

#include <vector>
using namespace std;

int lps(string s){
    string s2=s;
        reverse(s.begin(),s.end());
        int n=s.size();
        int dp[n+1][n+1];
        
        for(int i=0; i<n+1; i++)
        {
            for(int j=0;j<n+1;j++){
                if(i==0 || j==0) dp[i][j]=0;
            }
        }
        
        for(int i=1; i<n+1; i++)
        {
            for(int j=1; j<n+1; j++)
            {
                if(s2[i-1]==s[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        return dp[n][n];
        
}

void mindelinstringtomakepalindrome(string s){
    int n=s.size();
    
    int len=lps(s);
    cout<<"longestPalindromeSubseq is:"<<(n-len)<<endl;
}

int main()
{
    string s="agbcba";
    mindelinstringtomakepalindrome(s);

    return 0;
}
